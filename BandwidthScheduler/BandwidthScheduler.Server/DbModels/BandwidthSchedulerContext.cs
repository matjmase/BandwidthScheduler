// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BandwidthScheduler.Server.DbModels;

public partial class BandwidthSchedulerContext : DbContext
{
    public BandwidthSchedulerContext(DbContextOptions<BandwidthSchedulerContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Availability> Availabilities { get; set; }

    public virtual DbSet<AvailabilityNotification> AvailabilityNotifications { get; set; }

    public virtual DbSet<Commitment> Commitments { get; set; }

    public virtual DbSet<CommitmentNotification> CommitmentNotifications { get; set; }

    public virtual DbSet<Password> Passwords { get; set; }

    public virtual DbSet<Team> Teams { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UserTeam> UserTeams { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Availability>(entity =>
        {
            entity.ToTable("Availability");

            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.Availabilities)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Availability_User");
        });

        modelBuilder.Entity<AvailabilityNotification>(entity =>
        {
            entity.ToTable("AvailabilityNotification");

            entity.Property(e => e.TimeStamp).HasColumnType("datetime");

            entity.HasOne(d => d.Availability).WithMany(p => p.AvailabilityNotifications)
                .HasForeignKey(d => d.AvailabilityId)
                .HasConstraintName("FK_AvailabilityNotification_Availability");

            entity.HasOne(d => d.User).WithMany(p => p.AvailabilityNotifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AvailabilityNotification_User");
        });

        modelBuilder.Entity<Commitment>(entity =>
        {
            entity.ToTable("Commitment");

            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.Team).WithMany(p => p.Commitments)
                .HasForeignKey(d => d.TeamId)
                .HasConstraintName("FK_Commitment_Team");

            entity.HasOne(d => d.User).WithMany(p => p.Commitments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Commitment_User");
        });

        modelBuilder.Entity<CommitmentNotification>(entity =>
        {
            entity.ToTable("CommitmentNotification");

            entity.Property(e => e.TimeStamp).HasColumnType("datetime");

            entity.HasOne(d => d.Commitment).WithMany(p => p.CommitmentNotifications)
                .HasForeignKey(d => d.CommitmentId)
                .HasConstraintName("FK_CommitmentNotification_Commitment");

            entity.HasOne(d => d.User).WithMany(p => p.CommitmentNotifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CommitmentNotification_User");
        });

        modelBuilder.Entity<Password>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("Password");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.Hash)
                .IsRequired()
                .HasMaxLength(88)
                .IsFixedLength();
            entity.Property(e => e.Salt)
                .IsRequired()
                .HasMaxLength(52)
                .IsFixedLength();

            entity.HasOne(d => d.User).WithOne(p => p.Password)
                .HasForeignKey<Password>(d => d.UserId)
                .HasConstraintName("FK_Password_User");
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.ToTable("Team");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RoleId });

            entity.ToTable("UserRole");

            entity.HasOne(d => d.User).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserRole_User");
        });

        modelBuilder.Entity<UserTeam>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.TeamId });

            entity.ToTable("UserTeam");

            entity.HasOne(d => d.Team).WithMany(p => p.UserTeams)
                .HasForeignKey(d => d.TeamId)
                .HasConstraintName("FK_UserTeam_Team");

            entity.HasOne(d => d.User).WithMany(p => p.UserTeams)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserTeam_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}